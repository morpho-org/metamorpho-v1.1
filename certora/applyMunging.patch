diff -ruN MetaMorpho.sol MetaMorpho.sol
--- MetaMorpho.sol	2024-08-08 11:43:17
+++ MetaMorpho.sol	2024-08-08 11:43:44
@@ -9,24 +9,22 @@
     IMetaMorphoBase,
     IMetaMorphoStaticTyping
 } from "./interfaces/IMetaMorpho.sol";
-import {Id, MarketParams, Market, IMorpho} from "../lib/morpho-blue/src/interfaces/IMorpho.sol";
+import {Id, MarketParams, Market, IMorphoHarness} from "../helpers/IMorphoHarness.sol";
 
 import {PendingUint192, PendingAddress, PendingLib} from "./libraries/PendingLib.sol";
 import {ConstantsLib} from "./libraries/ConstantsLib.sol";
 import {ErrorsLib} from "./libraries/ErrorsLib.sol";
 import {EventsLib} from "./libraries/EventsLib.sol";
-import {WAD} from "../lib/morpho-blue/src/libraries/MathLib.sol";
-import {UtilsLib} from "../lib/morpho-blue/src/libraries/UtilsLib.sol";
-import {SafeCast} from "../lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol";
-import {SharesMathLib} from "../lib/morpho-blue/src/libraries/SharesMathLib.sol";
-import {MorphoLib} from "../lib/morpho-blue/src/libraries/periphery/MorphoLib.sol";
-import {MarketParamsLib} from "../lib/morpho-blue/src/libraries/MarketParamsLib.sol";
-import {IERC20Metadata} from "../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol";
-import {MorphoBalancesLib} from "../lib/morpho-blue/src/libraries/periphery/MorphoBalancesLib.sol";
+import {WAD} from "../../lib/morpho-blue/src/libraries/MathLib.sol";
+import {UtilsLib} from "../../lib/morpho-blue/src/libraries/UtilsLib.sol";
+import {SafeCast} from "../../lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol";
+import {SharesMathLib} from "../../lib/morpho-blue/src/libraries/SharesMathLib.sol";
+import {MarketParamsLib} from "../../lib/morpho-blue/src/libraries/MarketParamsLib.sol";
+import {IERC20Metadata} from "../../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol";
 
-import {Multicall} from "../lib/openzeppelin-contracts/contracts/utils/Multicall.sol";
-import {Ownable2Step, Ownable} from "../lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol";
-import {ERC20Permit} from "../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol";
+import {Multicall} from "../../lib/openzeppelin-contracts/contracts/utils/Multicall.sol";
+import {Ownable2Step, Ownable} from "../../lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol";
+import {ERC20Permit} from "../../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol";
 import {
     IERC20,
     IERC4626,
@@ -34,7 +32,7 @@
     ERC4626,
     Math,
     SafeERC20
-} from "../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol";
+} from "../../lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC4626.sol";
 
 /// @title MetaMorpho
 /// @author Morpho Labs
@@ -45,9 +43,7 @@
     using UtilsLib for uint256;
     using SafeCast for uint256;
     using SafeERC20 for IERC20;
-    using MorphoLib for IMorpho;
     using SharesMathLib for uint256;
-    using MorphoBalancesLib for IMorpho;
     using MarketParamsLib for MarketParams;
     using PendingLib for MarketConfig;
     using PendingLib for PendingUint192;
@@ -56,7 +52,7 @@
     /* IMMUTABLES */
 
     /// @inheritdoc IMetaMorphoBase
-    IMorpho public immutable MORPHO;
+    IMorphoHarness public immutable MORPHO;
 
     /// @notice OpenZeppelin decimals offset used by the ERC4626 implementation.
     /// @dev Calculated to be max(0, 18 - underlyingDecimals) at construction, so the initial conversion rate maximizes
@@ -110,6 +106,19 @@
     /// @inheritdoc IMetaMorphoBase
     uint256 public lostAssets;
 
+    // HARNESS
+    // The index of the identifier of the last market withdrawn.
+    uint256 public lastIndexWithdraw;
+
+    // HARNESS
+    // The rank of a market identifier in the withdraw queue.
+    // Returns 0 if the corresponding market is not in the withdraw queue.
+    mapping(Id => uint256) public withdrawRank;
+
+    // HARNESS
+    // The last index at which a market identifier has been removed from the withdraw queue.
+    mapping(Id => uint256) public deletedAt;
+
     /* CONSTRUCTOR */
 
     /// @dev Initializes the contract.
@@ -129,7 +138,7 @@
     ) ERC4626(IERC20(_asset)) ERC20Permit(_name) ERC20(_name, _symbol) Ownable(owner) {
         if (morpho == address(0)) revert ErrorsLib.ZeroAddress();
 
-        MORPHO = IMorpho(morpho);
+        MORPHO = IMorphoHarness(morpho);
         DECIMALS_OFFSET = uint8(uint256(18).zeroFloorSub(IERC20Metadata(_asset).decimals()));
 
         _checkTimelockBounds(initialTimelock);
@@ -341,6 +350,9 @@
             seen[prevIndex] = true;
 
             newWithdrawQueue[i] = id;
+
+            // HARNESS
+            withdrawRank[id] = i + 1;
         }
 
         for (uint256 i; i < currLength; ++i) {
@@ -358,6 +370,10 @@
                     }
                 }
 
+                // HARNESS
+                deletedAt[id] = i;
+                delete withdrawRank[id];
+
                 delete config[id];
             }
         }
@@ -735,6 +751,9 @@
 
         if (supplyCap > 0) {
             if (!marketConfig.enabled) {
+                // HARNESS
+                withdrawRank[id] = withdrawQueue.length + 1;
+
                 withdrawQueue.push(id);
 
                 if (withdrawQueue.length > ConstantsLib.MAX_QUEUE_LENGTH) revert ErrorsLib.MaxQueueLengthExceeded();
@@ -794,6 +813,9 @@
     /// @dev Withdraws `assets` from Morpho.
     function _withdrawMorpho(uint256 assets) internal {
         for (uint256 i; i < withdrawQueue.length; ++i) {
+            // HARNESS
+            lastIndexWithdraw = i;
+
             Id id = withdrawQueue[i];
             MarketParams memory marketParams = _marketParams(id);
             (uint256 supplyAssets,, Market memory market) = _accruedSupplyBalance(marketParams, id);
@@ -913,5 +935,13 @@
         }
 
         return (feeShares, newTotalAssets, newLostAssets);
+    }
+
+    function realTotalAssets() external view returns (uint256) {
+        uint256 realTotalAssets;
+        for (uint256 i; i < withdrawQueue.length; ++i) {
+            realTotalAssets += MORPHO.expectedSupplyAssets(_marketParams(withdrawQueue[i]), address(this));
+        }
+        return realTotalAssets;
     }
 }
